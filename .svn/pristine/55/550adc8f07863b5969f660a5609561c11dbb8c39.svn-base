package com.t.databaselib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATABASE_CITY_INFO".
*/
public class DatabaseCityInfoDao extends AbstractDao<DatabaseCityInfo, String> {

    public static final String TABLENAME = "DATABASE_CITY_INFO";

    /**
     * Properties of entity DatabaseCityInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property AddressDetail = new Property(1, String.class, "addressDetail", false, "ADDRESS_DETAIL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Province = new Property(3, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property District = new Property(5, String.class, "district", false, "DISTRICT");
        public final static Property Latitude = new Property(6, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, double.class, "longitude", false, "LONGITUDE");
        public final static Property AddTime = new Property(8, long.class, "addTime", false, "ADD_TIME");
    }


    public DatabaseCityInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DatabaseCityInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATABASE_CITY_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ADDRESS_DETAIL\" TEXT," + // 1: addressDetail
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"PROVINCE\" TEXT NOT NULL ," + // 3: province
                "\"CITY\" TEXT NOT NULL ," + // 4: city
                "\"DISTRICT\" TEXT NOT NULL ," + // 5: district
                "\"LATITUDE\" REAL NOT NULL ," + // 6: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: longitude
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 8: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATABASE_CITY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatabaseCityInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String addressDetail = entity.getAddressDetail();
        if (addressDetail != null) {
            stmt.bindString(2, addressDetail);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getProvince());
        stmt.bindString(5, entity.getCity());
        stmt.bindString(6, entity.getDistrict());
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindLong(9, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatabaseCityInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String addressDetail = entity.getAddressDetail();
        if (addressDetail != null) {
            stmt.bindString(2, addressDetail);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getProvince());
        stmt.bindString(5, entity.getCity());
        stmt.bindString(6, entity.getDistrict());
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindLong(9, entity.getAddTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DatabaseCityInfo readEntity(Cursor cursor, int offset) {
        DatabaseCityInfo entity = new DatabaseCityInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // addressDetail
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // province
            cursor.getString(offset + 4), // city
            cursor.getString(offset + 5), // district
            cursor.getDouble(offset + 6), // latitude
            cursor.getDouble(offset + 7), // longitude
            cursor.getLong(offset + 8) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatabaseCityInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAddressDetail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setProvince(cursor.getString(offset + 3));
        entity.setCity(cursor.getString(offset + 4));
        entity.setDistrict(cursor.getString(offset + 5));
        entity.setLatitude(cursor.getDouble(offset + 6));
        entity.setLongitude(cursor.getDouble(offset + 7));
        entity.setAddTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DatabaseCityInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DatabaseCityInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatabaseCityInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
