package com.xzte.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_INFO".
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, Long> {

    public static final String TABLENAME = "GOODS_INFO";

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GoodsId = new Property(1, String.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsUrl = new Property(3, String.class, "goodsUrl", false, "GOODS_URL");
        public final static Property GoodsNumber = new Property(4, int.class, "goodsNumber", false, "GOODS_NUMBER");
        public final static Property ShopId = new Property(5, String.class, "shopId", false, "SHOP_ID");
    }


    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GOODS_ID\" TEXT UNIQUE ," + // 1: goodsId
                "\"GOODS_NAME\" TEXT NOT NULL ," + // 2: goodsName
                "\"GOODS_URL\" TEXT," + // 3: goodsUrl
                "\"GOODS_NUMBER\" INTEGER NOT NULL ," + // 4: goodsNumber
                "\"SHOP_ID\" TEXT NOT NULL );"); // 5: shopId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(2, goodsId);
        }
        stmt.bindString(3, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(4, goodsUrl);
        }
        stmt.bindLong(5, entity.getGoodsNumber());
        stmt.bindString(6, entity.getShopId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(2, goodsId);
        }
        stmt.bindString(3, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(4, goodsUrl);
        }
        stmt.bindLong(5, entity.getGoodsNumber());
        stmt.bindString(6, entity.getShopId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsId
            cursor.getString(offset + 2), // goodsName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsUrl
            cursor.getInt(offset + 4), // goodsNumber
            cursor.getString(offset + 5) // shopId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsName(cursor.getString(offset + 2));
        entity.setGoodsUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsNumber(cursor.getInt(offset + 4));
        entity.setShopId(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
