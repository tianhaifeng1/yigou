package com.t.databaselib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATABASE_GOODS_INFO".
*/
public class DatabaseGoodsInfoDao extends AbstractDao<DatabaseGoodsInfo, String> {

    public static final String TABLENAME = "DATABASE_GOODS_INFO";

    /**
     * Properties of entity DatabaseGoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property GoodsId = new Property(1, String.class, "goodsId", false, "GOODS_ID");
        public final static Property ShopId = new Property(2, String.class, "shopId", false, "SHOP_ID");
        public final static Property SpecId = new Property(3, String.class, "specId", false, "SPEC_ID");
        public final static Property GoodsName = new Property(4, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsUrl = new Property(5, String.class, "goodsUrl", false, "GOODS_URL");
        public final static Property GoodsPrice = new Property(6, float.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property GoodsPriceVip = new Property(7, float.class, "goodsPriceVip", false, "GOODS_PRICE_VIP");
        public final static Property GoodsNumber = new Property(8, int.class, "goodsNumber", false, "GOODS_NUMBER");
        public final static Property SpecName = new Property(9, String.class, "specName", false, "SPEC_NAME");
        public final static Property GoodsTotal = new Property(10, int.class, "goodsTotal", false, "GOODS_TOTAL");
        public final static Property GoodsAddTime = new Property(11, long.class, "goodsAddTime", false, "GOODS_ADD_TIME");
        public final static Property IsSelect = new Property(12, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property IsTemai = new Property(13, int.class, "isTemai", false, "IS_TEMAI");
        public final static Property Catid = new Property(14, String.class, "catid", false, "CATID");
        public final static Property Cnname = new Property(15, String.class, "cnname", false, "CNNAME");
        public final static Property GoodsType = new Property(16, int.class, "goodsType", false, "GOODS_TYPE");
        public final static Property StartTime = new Property(17, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(18, long.class, "endTime", false, "END_TIME");
    }


    public DatabaseGoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DatabaseGoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATABASE_GOODS_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"GOODS_ID\" TEXT NOT NULL ," + // 1: goodsId
                "\"SHOP_ID\" TEXT NOT NULL ," + // 2: shopId
                "\"SPEC_ID\" TEXT NOT NULL ," + // 3: specId
                "\"GOODS_NAME\" TEXT NOT NULL ," + // 4: goodsName
                "\"GOODS_URL\" TEXT," + // 5: goodsUrl
                "\"GOODS_PRICE\" REAL NOT NULL ," + // 6: goodsPrice
                "\"GOODS_PRICE_VIP\" REAL NOT NULL ," + // 7: goodsPriceVip
                "\"GOODS_NUMBER\" INTEGER NOT NULL ," + // 8: goodsNumber
                "\"SPEC_NAME\" TEXT NOT NULL ," + // 9: specName
                "\"GOODS_TOTAL\" INTEGER NOT NULL ," + // 10: goodsTotal
                "\"GOODS_ADD_TIME\" INTEGER NOT NULL ," + // 11: goodsAddTime
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 12: isSelect
                "\"IS_TEMAI\" INTEGER NOT NULL ," + // 13: isTemai
                "\"CATID\" TEXT," + // 14: catid
                "\"CNNAME\" TEXT," + // 15: cnname
                "\"GOODS_TYPE\" INTEGER NOT NULL ," + // 16: goodsType
                "\"START_TIME\" INTEGER NOT NULL ," + // 17: startTime
                "\"END_TIME\" INTEGER NOT NULL );"); // 18: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATABASE_GOODS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatabaseGoodsInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getGoodsId());
        stmt.bindString(3, entity.getShopId());
        stmt.bindString(4, entity.getSpecId());
        stmt.bindString(5, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(6, goodsUrl);
        }
        stmt.bindDouble(7, entity.getGoodsPrice());
        stmt.bindDouble(8, entity.getGoodsPriceVip());
        stmt.bindLong(9, entity.getGoodsNumber());
        stmt.bindString(10, entity.getSpecName());
        stmt.bindLong(11, entity.getGoodsTotal());
        stmt.bindLong(12, entity.getGoodsAddTime());
        stmt.bindLong(13, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsTemai());
 
        String catid = entity.getCatid();
        if (catid != null) {
            stmt.bindString(15, catid);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(16, cnname);
        }
        stmt.bindLong(17, entity.getGoodsType());
        stmt.bindLong(18, entity.getStartTime());
        stmt.bindLong(19, entity.getEndTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatabaseGoodsInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getGoodsId());
        stmt.bindString(3, entity.getShopId());
        stmt.bindString(4, entity.getSpecId());
        stmt.bindString(5, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(6, goodsUrl);
        }
        stmt.bindDouble(7, entity.getGoodsPrice());
        stmt.bindDouble(8, entity.getGoodsPriceVip());
        stmt.bindLong(9, entity.getGoodsNumber());
        stmt.bindString(10, entity.getSpecName());
        stmt.bindLong(11, entity.getGoodsTotal());
        stmt.bindLong(12, entity.getGoodsAddTime());
        stmt.bindLong(13, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsTemai());
 
        String catid = entity.getCatid();
        if (catid != null) {
            stmt.bindString(15, catid);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(16, cnname);
        }
        stmt.bindLong(17, entity.getGoodsType());
        stmt.bindLong(18, entity.getStartTime());
        stmt.bindLong(19, entity.getEndTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DatabaseGoodsInfo readEntity(Cursor cursor, int offset) {
        DatabaseGoodsInfo entity = new DatabaseGoodsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // goodsId
            cursor.getString(offset + 2), // shopId
            cursor.getString(offset + 3), // specId
            cursor.getString(offset + 4), // goodsName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodsUrl
            cursor.getFloat(offset + 6), // goodsPrice
            cursor.getFloat(offset + 7), // goodsPriceVip
            cursor.getInt(offset + 8), // goodsNumber
            cursor.getString(offset + 9), // specName
            cursor.getInt(offset + 10), // goodsTotal
            cursor.getLong(offset + 11), // goodsAddTime
            cursor.getShort(offset + 12) != 0, // isSelect
            cursor.getInt(offset + 13), // isTemai
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // catid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cnname
            cursor.getInt(offset + 16), // goodsType
            cursor.getLong(offset + 17), // startTime
            cursor.getLong(offset + 18) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatabaseGoodsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsId(cursor.getString(offset + 1));
        entity.setShopId(cursor.getString(offset + 2));
        entity.setSpecId(cursor.getString(offset + 3));
        entity.setGoodsName(cursor.getString(offset + 4));
        entity.setGoodsUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsPrice(cursor.getFloat(offset + 6));
        entity.setGoodsPriceVip(cursor.getFloat(offset + 7));
        entity.setGoodsNumber(cursor.getInt(offset + 8));
        entity.setSpecName(cursor.getString(offset + 9));
        entity.setGoodsTotal(cursor.getInt(offset + 10));
        entity.setGoodsAddTime(cursor.getLong(offset + 11));
        entity.setIsSelect(cursor.getShort(offset + 12) != 0);
        entity.setIsTemai(cursor.getInt(offset + 13));
        entity.setCatid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCnname(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGoodsType(cursor.getInt(offset + 16));
        entity.setStartTime(cursor.getLong(offset + 17));
        entity.setEndTime(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DatabaseGoodsInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DatabaseGoodsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatabaseGoodsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
