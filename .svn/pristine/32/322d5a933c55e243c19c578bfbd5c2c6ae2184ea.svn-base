// This file was generated by PermissionsDispatcher. Do not modify!
package com.work.doctor.fruits.base;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import com.t.httplib.yigou.DemoModel;
import com.trjx.tbase.mvp.TPresenter;
import com.trjx.tbase.mvp.TView;
import java.lang.String;
import permissions.dispatcher.PermissionUtils;

final class DemoMVPActivityPermissionsDispatcher {
  private static final int REQUEST_GETPREMISSION_ALL = 0;

  private static final String[] PERMISSION_GETPREMISSION_ALL = new String[] {"android.permission.CAMERA","android.permission.READ_EXTERNAL_STORAGE","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.CALL_PHONE","android.permission.ACCESS_COARSE_LOCATION","android.permission.ACCESS_FINE_LOCATION"};

  private static final int REQUEST_GETPREMISSION_CALL_PHONE = 1;

  private static final String[] PERMISSION_GETPREMISSION_CALL_PHONE = new String[] {"android.permission.CALL_PHONE"};

  private static final int REQUEST_GETPREMISSION_CAMERA = 2;

  private static final String[] PERMISSION_GETPREMISSION_CAMERA = new String[] {"android.permission.CAMERA","android.permission.READ_EXTERNAL_STORAGE","android.permission.WRITE_EXTERNAL_STORAGE"};

  private static final int REQUEST_GETPREMISSION_LOCATION = 3;

  private static final String[] PERMISSION_GETPREMISSION_LOCATION = new String[] {"android.permission.ACCESS_COARSE_LOCATION","android.permission.ACCESS_FINE_LOCATION"};

  private DemoMVPActivityPermissionsDispatcher() {
  }

  static <V extends TView, P extends TPresenter<V, DemoModel>> void getPremission_allWithPermissionCheck(@NonNull DemoMVPActivity<V, P> target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPREMISSION_ALL)) {
      target.getPremission_all();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GETPREMISSION_ALL, REQUEST_GETPREMISSION_ALL);
    }
  }

  static <V extends TView, P extends TPresenter<V, DemoModel>> void getPremission_call_phoneWithPermissionCheck(@NonNull DemoMVPActivity<V, P> target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPREMISSION_CALL_PHONE)) {
      target.getPremission_call_phone();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GETPREMISSION_CALL_PHONE, REQUEST_GETPREMISSION_CALL_PHONE);
    }
  }

  static <V extends TView, P extends TPresenter<V, DemoModel>> void getPremission_cameraWithPermissionCheck(@NonNull DemoMVPActivity<V, P> target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPREMISSION_CAMERA)) {
      target.getPremission_camera();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GETPREMISSION_CAMERA, REQUEST_GETPREMISSION_CAMERA);
    }
  }

  static <V extends TView, P extends TPresenter<V, DemoModel>> void getPremission_locationWithPermissionCheck(@NonNull DemoMVPActivity<V, P> target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPREMISSION_LOCATION)) {
      target.getPremission_location();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GETPREMISSION_LOCATION, REQUEST_GETPREMISSION_LOCATION);
    }
  }

  static <V extends TView, P extends TPresenter<V, DemoModel>> void onRequestPermissionsResult(@NonNull DemoMVPActivity<V, P> target,
      int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_GETPREMISSION_ALL:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getPremission_all();
      }
      break;
      case REQUEST_GETPREMISSION_CALL_PHONE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getPremission_call_phone();
      }
      break;
      case REQUEST_GETPREMISSION_CAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getPremission_camera();
      }
      break;
      case REQUEST_GETPREMISSION_LOCATION:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getPremission_location();
      }
      break;
      default:
      break;
    }
  }
}
