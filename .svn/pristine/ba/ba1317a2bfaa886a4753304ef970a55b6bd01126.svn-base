package com.t.databaselib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATABASE_SHOP_INFO".
*/
public class DatabaseShopInfoDao extends AbstractDao<DatabaseShopInfo, String> {

    public static final String TABLENAME = "DATABASE_SHOP_INFO";

    /**
     * Properties of entity DatabaseShopInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property IsAllSelect = new Property(1, boolean.class, "isAllSelect", false, "IS_ALL_SELECT");
        public final static Property ShopTotalPrice = new Property(2, float.class, "shopTotalPrice", false, "SHOP_TOTAL_PRICE");
        public final static Property ShopId = new Property(3, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(4, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopIntro = new Property(5, String.class, "shopIntro", false, "SHOP_INTRO");
        public final static Property ShopAddress = new Property(6, String.class, "shopAddress", false, "SHOP_ADDRESS");
        public final static Property ShopLa = new Property(7, double.class, "shopLa", false, "SHOP_LA");
        public final static Property ShopLo = new Property(8, double.class, "shopLo", false, "SHOP_LO");
        public final static Property ShopArea = new Property(9, int.class, "shopArea", false, "SHOP_AREA");
    }


    public DatabaseShopInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DatabaseShopInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATABASE_SHOP_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_ALL_SELECT\" INTEGER NOT NULL ," + // 1: isAllSelect
                "\"SHOP_TOTAL_PRICE\" REAL NOT NULL ," + // 2: shopTotalPrice
                "\"SHOP_ID\" TEXT UNIQUE ," + // 3: shopId
                "\"SHOP_NAME\" TEXT NOT NULL ," + // 4: shopName
                "\"SHOP_INTRO\" TEXT," + // 5: shopIntro
                "\"SHOP_ADDRESS\" TEXT NOT NULL ," + // 6: shopAddress
                "\"SHOP_LA\" REAL NOT NULL ," + // 7: shopLa
                "\"SHOP_LO\" REAL NOT NULL ," + // 8: shopLo
                "\"SHOP_AREA\" INTEGER NOT NULL );"); // 9: shopArea
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATABASE_SHOP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatabaseShopInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsAllSelect() ? 1L: 0L);
        stmt.bindDouble(3, entity.getShopTotalPrice());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(4, shopId);
        }
        stmt.bindString(5, entity.getShopName());
 
        String shopIntro = entity.getShopIntro();
        if (shopIntro != null) {
            stmt.bindString(6, shopIntro);
        }
        stmt.bindString(7, entity.getShopAddress());
        stmt.bindDouble(8, entity.getShopLa());
        stmt.bindDouble(9, entity.getShopLo());
        stmt.bindLong(10, entity.getShopArea());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatabaseShopInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getIsAllSelect() ? 1L: 0L);
        stmt.bindDouble(3, entity.getShopTotalPrice());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(4, shopId);
        }
        stmt.bindString(5, entity.getShopName());
 
        String shopIntro = entity.getShopIntro();
        if (shopIntro != null) {
            stmt.bindString(6, shopIntro);
        }
        stmt.bindString(7, entity.getShopAddress());
        stmt.bindDouble(8, entity.getShopLa());
        stmt.bindDouble(9, entity.getShopLo());
        stmt.bindLong(10, entity.getShopArea());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DatabaseShopInfo readEntity(Cursor cursor, int offset) {
        DatabaseShopInfo entity = new DatabaseShopInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isAllSelect
            cursor.getFloat(offset + 2), // shopTotalPrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shopId
            cursor.getString(offset + 4), // shopName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopIntro
            cursor.getString(offset + 6), // shopAddress
            cursor.getDouble(offset + 7), // shopLa
            cursor.getDouble(offset + 8), // shopLo
            cursor.getInt(offset + 9) // shopArea
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatabaseShopInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsAllSelect(cursor.getShort(offset + 1) != 0);
        entity.setShopTotalPrice(cursor.getFloat(offset + 2));
        entity.setShopId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShopName(cursor.getString(offset + 4));
        entity.setShopIntro(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShopAddress(cursor.getString(offset + 6));
        entity.setShopLa(cursor.getDouble(offset + 7));
        entity.setShopLo(cursor.getDouble(offset + 8));
        entity.setShopArea(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DatabaseShopInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DatabaseShopInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatabaseShopInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
