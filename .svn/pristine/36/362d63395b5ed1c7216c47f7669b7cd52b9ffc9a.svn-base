package com.t.databaselib;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_INFO".
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, String> {

    public static final String TABLENAME = "GOODS_INFO";

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property GoodsId = new Property(1, String.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsUrl = new Property(3, String.class, "goodsUrl", false, "GOODS_URL");
        public final static Property GoodsPrice = new Property(4, float.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property GoodsNumber = new Property(5, int.class, "goodsNumber", false, "GOODS_NUMBER");
        public final static Property SpecId = new Property(6, String.class, "specId", false, "SPEC_ID");
        public final static Property SpecName = new Property(7, String.class, "specName", false, "SPEC_NAME");
        public final static Property GoodsAddTime = new Property(8, long.class, "goodsAddTime", false, "GOODS_ADD_TIME");
        public final static Property IsSelect = new Property(9, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property ShopId = new Property(10, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(11, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopAddress = new Property(12, String.class, "shopAddress", false, "SHOP_ADDRESS");
        public final static Property ShopLa = new Property(13, double.class, "shopLa", false, "SHOP_LA");
        public final static Property ShopLo = new Property(14, double.class, "shopLo", false, "SHOP_LO");
    }


    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"GOODS_ID\" TEXT NOT NULL ," + // 1: goodsId
                "\"GOODS_NAME\" TEXT NOT NULL ," + // 2: goodsName
                "\"GOODS_URL\" TEXT," + // 3: goodsUrl
                "\"GOODS_PRICE\" REAL NOT NULL ," + // 4: goodsPrice
                "\"GOODS_NUMBER\" INTEGER NOT NULL ," + // 5: goodsNumber
                "\"SPEC_ID\" TEXT NOT NULL ," + // 6: specId
                "\"SPEC_NAME\" TEXT NOT NULL ," + // 7: specName
                "\"GOODS_ADD_TIME\" INTEGER NOT NULL ," + // 8: goodsAddTime
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 9: isSelect
                "\"SHOP_ID\" TEXT NOT NULL ," + // 10: shopId
                "\"SHOP_NAME\" TEXT NOT NULL ," + // 11: shopName
                "\"SHOP_ADDRESS\" TEXT NOT NULL ," + // 12: shopAddress
                "\"SHOP_LA\" REAL NOT NULL ," + // 13: shopLa
                "\"SHOP_LO\" REAL NOT NULL );"); // 14: shopLo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getGoodsId());
        stmt.bindString(3, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(4, goodsUrl);
        }
        stmt.bindDouble(5, entity.getGoodsPrice());
        stmt.bindLong(6, entity.getGoodsNumber());
        stmt.bindString(7, entity.getSpecId());
        stmt.bindString(8, entity.getSpecName());
        stmt.bindLong(9, entity.getGoodsAddTime());
        stmt.bindLong(10, entity.getIsSelect() ? 1L: 0L);
        stmt.bindString(11, entity.getShopId());
        stmt.bindString(12, entity.getShopName());
        stmt.bindString(13, entity.getShopAddress());
        stmt.bindDouble(14, entity.getShopLa());
        stmt.bindDouble(15, entity.getShopLo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getGoodsId());
        stmt.bindString(3, entity.getGoodsName());
 
        String goodsUrl = entity.getGoodsUrl();
        if (goodsUrl != null) {
            stmt.bindString(4, goodsUrl);
        }
        stmt.bindDouble(5, entity.getGoodsPrice());
        stmt.bindLong(6, entity.getGoodsNumber());
        stmt.bindString(7, entity.getSpecId());
        stmt.bindString(8, entity.getSpecName());
        stmt.bindLong(9, entity.getGoodsAddTime());
        stmt.bindLong(10, entity.getIsSelect() ? 1L: 0L);
        stmt.bindString(11, entity.getShopId());
        stmt.bindString(12, entity.getShopName());
        stmt.bindString(13, entity.getShopAddress());
        stmt.bindDouble(14, entity.getShopLa());
        stmt.bindDouble(15, entity.getShopLo());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // goodsId
            cursor.getString(offset + 2), // goodsName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsUrl
            cursor.getFloat(offset + 4), // goodsPrice
            cursor.getInt(offset + 5), // goodsNumber
            cursor.getString(offset + 6), // specId
            cursor.getString(offset + 7), // specName
            cursor.getLong(offset + 8), // goodsAddTime
            cursor.getShort(offset + 9) != 0, // isSelect
            cursor.getString(offset + 10), // shopId
            cursor.getString(offset + 11), // shopName
            cursor.getString(offset + 12), // shopAddress
            cursor.getDouble(offset + 13), // shopLa
            cursor.getDouble(offset + 14) // shopLo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsId(cursor.getString(offset + 1));
        entity.setGoodsName(cursor.getString(offset + 2));
        entity.setGoodsUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsPrice(cursor.getFloat(offset + 4));
        entity.setGoodsNumber(cursor.getInt(offset + 5));
        entity.setSpecId(cursor.getString(offset + 6));
        entity.setSpecName(cursor.getString(offset + 7));
        entity.setGoodsAddTime(cursor.getLong(offset + 8));
        entity.setIsSelect(cursor.getShort(offset + 9) != 0);
        entity.setShopId(cursor.getString(offset + 10));
        entity.setShopName(cursor.getString(offset + 11));
        entity.setShopAddress(cursor.getString(offset + 12));
        entity.setShopLa(cursor.getDouble(offset + 13));
        entity.setShopLo(cursor.getDouble(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
