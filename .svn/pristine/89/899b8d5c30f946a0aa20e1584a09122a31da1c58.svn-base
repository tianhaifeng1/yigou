package com.xzte.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_INFO".
*/
public class ShopInfoDao extends AbstractDao<ShopInfo, Long> {

    public static final String TABLENAME = "SHOP_INFO";

    /**
     * Properties of entity ShopInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ShopId = new Property(1, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(2, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopAddress = new Property(3, String.class, "shopAddress", false, "SHOP_ADDRESS");
        public final static Property La = new Property(4, double.class, "la", false, "LA");
        public final static Property Lo = new Property(5, double.class, "lo", false, "LO");
    }


    public ShopInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ShopInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SHOP_ID\" TEXT UNIQUE ," + // 1: shopId
                "\"SHOP_NAME\" TEXT NOT NULL ," + // 2: shopName
                "\"SHOP_ADDRESS\" TEXT NOT NULL ," + // 3: shopAddress
                "\"LA\" REAL NOT NULL ," + // 4: la
                "\"LO\" REAL NOT NULL );"); // 5: lo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(2, shopId);
        }
        stmt.bindString(3, entity.getShopName());
        stmt.bindString(4, entity.getShopAddress());
        stmt.bindDouble(5, entity.getLa());
        stmt.bindDouble(6, entity.getLo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(2, shopId);
        }
        stmt.bindString(3, entity.getShopName());
        stmt.bindString(4, entity.getShopAddress());
        stmt.bindDouble(5, entity.getLa());
        stmt.bindDouble(6, entity.getLo());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShopInfo readEntity(Cursor cursor, int offset) {
        ShopInfo entity = new ShopInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shopId
            cursor.getString(offset + 2), // shopName
            cursor.getString(offset + 3), // shopAddress
            cursor.getDouble(offset + 4), // la
            cursor.getDouble(offset + 5) // lo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setShopId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShopName(cursor.getString(offset + 2));
        entity.setShopAddress(cursor.getString(offset + 3));
        entity.setLa(cursor.getDouble(offset + 4));
        entity.setLo(cursor.getDouble(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
